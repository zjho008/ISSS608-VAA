---
title: "Hands-on Exercise 4a: Visual Statistical Analysis"
author: "Ho Zi Jun"
date: "May 04, 2024"
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
---

## [10.1]{style="color:grey"} Learning Outcomes

For this hands-on exercise, it will allow us to gain hands-on experience using:

-   ggstatsplot package to create visual graphics with rich statistical information,
-   performance package to visualise model diagnostics, and
-   parameters package to visualise model parameters

## [10.2]{style="color:grey"} Visual Statistical Analysis with ggstatsplot

[ggstatsplot](https://indrajeetpatil.github.io/ggstatsplot/) is an extension of [ggplot2](https://ggplot2.tidyverse.org/) package for creating graphics with details from statistical tests included in the information-rich plots themselves.

-   To provide alternative statistical inference methods by default.
-   To follow best practices for statistical reporting. For all statistical tests reported in the plots, the default template abides by the [APA](https://my.ilstu.edu/~jhkahn/apastats.html) gold standard for statistical reporting. For example, here are results from a robust t-test:

![Statistical Reporting](Visual_Statistical_Testing.jpg)

## [10.3]{style="color:grey"} Getting Started

### [10.3.1]{style="color:grey"} Installing and launching R packages

In this exercise, **ggstatsplot** and **tidyverse** will be used.

```{r}
pacman::p_load(ggstatsplot, tidyverse)
```

### [10.3.2]{style="color:grey"} Importing Data

::: callout-note
## Try-it-yourself

Import Exam.csv data by using appropriate tidyverse package.
:::

::: callout-tip
## Code chunk

The code chunk below uses `read_csv()` of **readr** package to import Exam_data.csv data file into R and saves it as a tibble data frame called `exam`.
:::

```{r}
exam <- read_csv("data/Exam_data.csv")
```

```{r}
#| echo: false
exam
```

### [10.3.3]{style="color:grey"} One-sample test: *gghistostats()* method

In the code chunk below, [*gghistostats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/gghistostats.html) is used to to build a visual of one-sample test on English scores.

```{r}
set.seed(1234)

gghistostats(
  data = exam,
  x = ENGLISH,
  type = "bayes",
  test.value = 60,
  xlab = "English scores"
)
```

**Default information**: - statistical details - Bayes Factor - sample sizes - distribution summary

### [10.3.4]{style="color:grey"} Unpacking the Bayes Factor

-   A Bayes factor is the ratio of the likelihood of one particular hypothesis to the likelihood of another. It can be interpreted as a measure of the strength of evidence in favor of one theory among two competing theories.

-   That’s because the Bayes factor gives us a way to evaluate the data in favor of a null hypothesis, and to use external information to do so. It tells us what the weight of the evidence is in favor of a given hypothesis.

-   When we are comparing two hypotheses, H1 (the alternate hypothesis) and H0 (the null hypothesis), the Bayes Factor is often written as B10. It can be defined mathematically as:

![Bayes Factor](bayes_factor.jpg) The [[**Schwarz criterion**]{.underline}](https://www.statisticshowto.com/bayesian-information-criterion/) is one of the easiest ways to calculate rough approximation of the Bayes Factor.

### [10.3.5]{style="color:grey"} How to interpret Bayes Factor

A **Bayes Factor** can be any positive number. One of the most common interpretations is this one—first proposed by Harold Jeffereys (1961) and slightly modified by [Lee and Wagenmakers](https://www-tandfonline-com.libproxy.smu.edu.sg/doi/pdf/10.1080/00031305.1999.10474443?needAccess=true) in 2013:

![Bayes Factor Interpretation](interpretation.jpg)

### [10.3.6]{style="color:grey"} Two-sample mean test: *ggbetweenstats()*

In the code chunk below, [ggbetweenstats()](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for two-sample mean test of Maths scores by gender.

```{r}
ggbetweenstats(
  data = exam,
  x = GENDER,
  y = MATHS,
  type = "np",
  messages = FALSE
)
```

**Default information**: - statistical details - Bayes Factor - sample sizes - distribution summary

### [10.3.7]{style="color:grey"} Oneway ANOVA Test: *ggbetweenstats()* method

In the code chunk below, [*ggbetweenstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbetweenstats.html) is used to build a visual for One-way ANOVA test on English score by race.

```{r}
ggbetweenstats(
  data = exam,
  x = RACE,
  y = ENGLISH,
  type = "p",
  mean.ci = TRUE,
  pairwise.comparisons = TRUE,
  pairwise.display = "s",
  p.adjust.method = "fdr",
  messages = FALSE
)
```

-   “ns” → only non-significant
-   “s” → only significant
-   “all” → everything

#### [10.3.7.1]{style="color:grey"} ggbetweenstats - Summary of tests

![](ggbetweenstats.jpg) ![](ggbetweenstats1.jpg) ![Summary of tests](ggbetweenstats2.jpg)

### [10.3.8]{style="color:grey"} Significant Test of Correlation: *ggscatterstats()*

In the code chunk below, [*ggscatterstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggscatterstats.html) is used to build a visual for Significant Test of Correlation between Maths scores and English scores.

```{r}
ggscatterstats(
  data = exam,
  x = MATHS,
  y = ENGLISH,
  marginal = FALSE,
)
```

### [10.3.9]{style="color:grey"} Significant Test of Association (Depedence) : *ggbarstats()* methods

In the code chunk below, the Maths scores is binned into a **4-class variable** by using [*cut()*](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/cut).

```{r}
exam1 <- exam %>%
  mutate(MATHS_bins =
           cut(MATHS,
               breaks = c(0,60,75,85,100))
)
```

In this code chunk below [*ggbarstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggbarstats.html) is used to build a visual for Significant Test of Association

```{r}
ggbarstats(exam1,
           x= MATHS_bins,
           y = GENDER)
```

## [10.4]{style="color:grey"} Visualising Models

In this section, we will learn how to visualise model diagnostics and model parameters by using parameters package.

-   The Toyota Corolla case study will be used. The purpose of study is to build a model to discover factors affecting prices of used-cars by taking into consideration a set of explanatory variables.

![](toyota.jpg)

## [10.5]{style="color:grey"} Getting Started

### [10.5.1]{style="color:grey"} Installing and loading the required libraries

In this exercise, **readxl**, **performance**, **parameters**, **see** and **ggstatsplot**packages will be used.

::: callout-note
## Try-it-yourself

```{r}
pacman::p_load(readxl, performance, parameters, see, ggstatsplot)
```
:::

### [10.5.2]{style="color:grey"} Importing Excel file: readxl methods

In the code chunk below,[*read_xls()*](https://readxl.tidyverse.org/reference/read_excel.html) of [**readxl**](https://readxl.tidyverse.org/) package is used to import the data worksheet of `ToyotaCorolla.xls` workbook into R.

```{r}
car_resale <- read_xls("data/ToyotaCorolla.xls",
                       "data")
car_resale
```

Notice that the output object `car_resale` is a tibble data frame.

### [10.5.3]{style="color:grey"} Multiple Regression Model using lm()

The code chunk below is used to calibrate a multiple linear regression model by using lm() of Base Stats of R.

```{r}
model <- lm(Price ~ Age_08_04 + Mfg_Year + KM +
              Weight + Guarantee_Period, data = car_resale)

model
```

### [10.5.4]{style="color:grey"} Model Diagnostic: checking for multicolinearity

In the code chunk,[*check_collinearity()*](https://easystats.github.io/performance/reference/check_collinearity.html) of [**performance**](https://easystats.github.io/performance/) package is used.

```{r}
check_collinearity(model)
```

## Tibular Table for `model`

```{r}
t <- check_collinearity(model)
```

From the results, the `check_collinearity()` fucntion has highlighted that the variables 'Age_08_04' & 'Mfg_Year' have a high correlation.

```{r}
check_c <- check_collinearity(model)
plot(check_c)
```

### [10.5.5]{style="color:grey"} Model Diagnostic: checking normality assumption

In the code chunk, [*check_normality()*](https://easystats.github.io/performance/reference/check_normality.html) of [**performance**](https://easystats.github.io/performance/) package is used as shown below.

```{r}
model1 <- lm(Price ~ Age_08_04 + KM +
               Weight + Guarantee_Period, data = car_resale)
```

```{r}
check_n <- check_normality(model1)
```

```{r}
plot(check_n)
```

### [10.5.6]{style="color:grey"} Model Diagnostic: Check model for homogeneity of variances

In the code chunk,[*check_heteroscedasticity()*](https://easystats.github.io/performance/reference/check_heteroscedasticity.html) of [**performance**](https://easystats.github.io/performance/) package will be utilised.

```{r}
check_h <- check_heteroscedasticity(model1)
```

```{r}
plot(check_h)
```

### [10.5.7]{style="color:grey"} Model Diagnostic: Complete check

We can also perform the complete check by using [*check_model()*](https://easystats.github.io/performance/reference/check_model.html).

```{r}
check_model(model1)
```

### [10.5.8]{style="color:grey"} Visualising Regression Parameters: see methods

In the code below, `plot()` of see package and `parameters()` of parameters package is used to visualise the parameters of a regression model.

```{r}
plot(parameters(model1))
```

Note: Largest uncertainty for Gurantee Period

### [10.5.9]{style="color:grey"} Visualising Regression Parameters: *ggcoefstats()* methods

In the code below, [*ggcoefstats()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcoefstats.html) of ggstatsplot package is used to visualise the parameters of a regression model.

```{r}
ggcoefstats(model1,
            output = "plot")
```
Not only showing relative position but the other statistical results: T statistics, p-value etc; AIC and BIC values for multiple linear regression. 
