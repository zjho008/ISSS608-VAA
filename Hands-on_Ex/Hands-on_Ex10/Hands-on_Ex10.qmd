---
title: "Hands-on Exercise 10: Information Dashboard Design (R methods)"
author: "Ho Zi Jun"
date: "June 22, 2024"
date-modified: "last-modified"
format: 
  html:
    number-sections: true
    code-fold: false
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
  message: false
editor: source
---

## Overview

By the end of this hands-on exercise, we will be able to:

-   create bullet chart by using ggplot2,
-   create sparklines by using ggplot2 ,
-   build industry standard dashboard by using R Shiny.

## Getting Started

For the purpose of this hands-on exercise, the following R packages will be used.

| Packages                                                            | Description|
|:------------------------------|:----------------------------------------|
| [tidyverse](https://www.tidyverse.org/)                             | provides a collection of functions for performing data science tasks such as importing, tidying, wrangling data and visualising data. It is not a single package but a collection of modern R packages including but not limited to [readr](https://readr.tidyverse.org/), [tidyr](https://tidyr.tidyverse.org/), [dplyr](https://dplyr.tidyverse.org/), [ggplot](https://ggplot2.tidyverse.org/), [tibble](https://tibble.tidyverse.org/), [stringr](https://stringr.tidyverse.org/), [forcats](https://forcats.tidyverse.org/) and [purrr](https://purrr.tidyverse.org/) |
| [lubridate](https://lubridate.tidyverse.org/)                       | provides functions to work with dates and times more efficiently                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           |
| [ggthemes](https://jrnold.github.io/ggthemes/)                      | is an extension of ggplot2. It provides additional [themes](https://yutannihilation.github.io/allYourFigureAreBelongToUs/ggthemes/) beyond the basic themes of ggplot2                                                                                                                                                                                                                                                                                                                                                                                                     |
| [gtExtras](https://jthomasmock.github.io/gtExtras/index.html)       | provides some additional helper functions to assist in creating beautiful tables with [gt](https://gt.rstudio.com/), an R package specially designed for anyone looking to make wonderful-looking tables using the R programming language.                                                                                                                                                                                                                                                                                                                                 |
| [reactable](https://glin.github.io/reactable/index.html)            | provides functions to create interactive data tables for R, based on the [React Table](https://github.com/tanstack/table/tree/v7) library and made with [reactR](https://github.com/react-R/reactR)                                                                                                                                                                                                                                                                                                                                                                        |
| [reactablefmtr](https://kcuilla.github.io/reactablefmtr/index.html) | provides various features to streamline and enhance the styling of interactive reactable tables with easy-to-use and highly-customizable functions and themes                                                                                                                                                                                                                                                                                                                                                                                                              |

: R Packages {.striped .hover tbl-colwidths="\[25,75\]"}

```{r}
pacman::p_load(lubridate, ggthemes, reactable,
               reactablefmtr, gt, gtExtras, tidyverse)
```

## Importing Microsoft Access database

### The data set

For the purpose of this study, a personal database in Microsoft Access mdb format called *Coffee Chain* will be used.

### Importing database into R

In the code chunk below, `odbcConnectAccess()` of [**RODBC**](https://cran.r-project.org/web/packages/RODBC/index.html) package is used used to import a database query table into R.

```{r}
# library(RODBC)
# con <- odbcConnectAccess2007('data/Coffee Chain.mdb')
# coffeechain <- sqlFetch(con, 'CoffeeChain Query')
# write_rds(coffeechain, "data/CoffeeChain.rds")
# odbcClose(con)
```

Note: Before running the code chunk, wer need to change the R system to 32bit version. This is because the `odbcConnectAccess()` is based on 32bit and not 64bit

### Data Preparation

The code chunk below is used to import *CoffeeChain.rds* into R.

```{r}
coffeechain <- read_rds("data/rds/CoffeeChain.rds")
```

Note: This step is optional if *coffeechain* is already available in R.

The code chunk below is used to aggregate Sales and Budgeted Sales at the Product level.

```{r}
product <- coffeechain %>%
  group_by(Product) %>%
  summarise(`target` = sum(`Budget Sales`),
            `current` = sum(`Sales`)) %>%
  ungroup()
```

### Bullet chart in ggplot2

The code chunk below is used to plot a bullet chart using ggplot2 functions.

```{r}
ggplot(product, aes(Product, current)) +
  geom_col(aes(Product, max(target) * 1.01),
           fill = "grey85", width = 0.85) +
  geom_col(aes(Product, target * 0.75),
           fill = "grey60", width = 0.85) +
  geom_col(aes(Product, target * 0.5),
           fill=  "grey50", width = 0.85) +
  geom_col(aes(Product, current),
           width = 0.35,
           fill = "black") +
  geom_errorbar(aes(y = target,
                    x = Product,
                    ymin = target,
                    ymax = target),
                width = .4,
                colour = "red",
                size = 1) +
  coord_flip()
```

## Plotting sparklines using ggplot2

In this section, we will learn how to plot sparklines by using ggplot2.

### Preparing the data

```{r}
sales_report <- coffeechain %>%
  filter(Date >= "2013-01-01") %>%
  mutate(Month = month(Date)) %>%
  group_by(Month, Product) %>%
  summarise(Sales = sum(Sales)) %>%
  ungroup() %>%
  select(Month, Product, Sales)
```

The code chunk below is used to compute the minimum, maximum and end of the month sales.

```{r}
mins <- group_by(sales_report, Product) %>%
  slice(which.min(Sales))
maxs <- group_by(sales_report, Product) %>%
  slice(which.max(Sales))
ends <- group_by(sales_report, Product) %>%
  filter(Month == max(Month))
```

The code chunk below is used to compute the 25 and 75 quantiles.

```{r}
quarts <- sales_report %>%
  group_by(Product) %>%
  summarise(quart1 = quantile(Sales,
                              0.25),
            quart2 = quantile(Sales,
                              0.75)) %>%
  right_join(sales_report)
```

### sparklines in ggplot2

The code chunk below is used tp plot sparklines.

```{r}
#| fig-width: 14
#| fig-height: 12
ggplot(sales_report, aes(x = Month, y = Sales)) +
  facet_grid(Product ~ ., scales = "free_y") +
  geom_ribbon(data = quarts, aes(ymin = quart1, max = quart2),
              fill = 'grey90') +
  geom_line(size = 0.3) +
  geom_point(data = mins, col = 'red')+
  geom_point(data = maxs, col = 'blue') +
  geom_text(data = mins, aes(label = Sales), vjust = -1) +
  geom_text(data = maxs, aes(label = Sales), vjust = 2.5) +
  geom_text(data = ends, aes(label = Sales), hjust = 0, nudge_x = 0.5) +
  geom_text(data = ends, aes(label = Product), hjust = 0, nudge_x = 1.0) +
  expand_limits(x = max(sales_report$Month) +
                  (0.25 * (max(sales_report$Month) - min(sales_report$Month)))) +
  scale_x_continuous(breaks = seq(1, 12, 1)) +
  scale_y_continuous(expand = c(0.1, 0)) +
  theme_tufte(base_size = 3, base_family = "Helvetica") +
  theme(axis.title = element_blank(), axis.text.y = element_blank(),
        axis.ticks = element_blank(), strip.text = element_blank())
```

## Static Information Dashboard Design: gt and gtExtras methods

In this section, we will learn how to create static information dashboard by using [gt](https://gt.rstudio.com/index.html) and [gtExtras](https://jthomasmock.github.io/gtExtras/index.html) packages. Before getting started, it is highly recommended to visit the webpage of these two packages and review all the materials provided on the webpages at least once. We do not have to understand and remember everything provided but at least have an overview of the purposes and functions provided by them.

### Plotting a simple bullet chart

## sparklines: gtExtras method

### Plotting Coffechain Sales report

### Adding statistics

### Combining the data.frame

### Plotting the updated data.table

### Combining bullet chart and sparklines

## Interactive Information Dashboard Design: reactable and reactablefmtr methods

### Plotting interactive sparklines

### Changing the pagesize

### Adding points and labels

### Adding reference line

### Adding bandline

### Changing from sparkline to sparkbar

## Reference
