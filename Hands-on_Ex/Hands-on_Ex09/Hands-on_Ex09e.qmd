---
title: "Hands-on Exercise 9e: Treemap Visualisation with R"
author: "Ho Zi Jun"
date: "June 15, 2024"
date-modified: "last-modified"
format: 
  html:
    number-sections: true
    code-fold: false
execute:
  eval: true
  echo: true
  warning: false
  freeze: true
  message: false
editor: source
---

## Overview

In this hands-on exercise, we will gain hands-on experiences on designing treemap using appropriate R packages. The hands-on exercise consists of three main sections. Firstly, we will learn how to manipulate transaction data into a treemap strcuture by using selected functions provided in **dplyr** package. Then, we will learn how to plot static treemap by using **treemap** package. In the third section, we will learn how to design interactive treemap by using **d3treeR** package.

## Installing and Launching R Packages

Before we get started, we are required to check if **treemap** and **tidyverse** packages have been installed in our R environment.

```{r}
pacman::p_load(treemap, treemapify, tidyverse)
```

## Data Wrangling

In this exercise, *REALIS2018.csv* data will be used. This dataset provides information of private property transaction records in 2018. The dataset is extracted from [REALIS portal](https://spring.ura.gov.sg/lad/ore/login/index.cfm) of Urban Redevelopment Authority (URA).

### Importing the data set

In the code chunk below, *read_csv()* of **readr** is used to import realis2018.csv into R and parsed it into tibble R data.frame format.

```{r}
realis2018 <- read_csv("data/realis2018.csv")
```

The output tibble data.frame is called *realis2018*.

### Data Wrangling and Manipulation

The data.frame *realis2018* is in transaction record form, which is highly disaggregated and not appropriate to be used to plot a treemap. In this section, we will perform the following steps to manipulate and prepare a data.frame that is appropriate for treemap visualisation:

-   group transaction records by *Project Name*, *Planning Region*, *Planning Area*, *Property Type* and *Type of Sale*, and
-   compute *Total Unit Sold*, *Total Area*, *Median Unit Price* and *Median Transacted Price* by applying appropriate summary statistics on *No. of Units*, *Area (sqm)*, *Unit Price (\$ psm)* and *Transacted Price (\$)* respectively.

Two key verbs of **dplyr** package, namely: *group_by()* and *summarize()* will be used to perform these steps.

*group_by()* breaks down a data.frame into specified groups of rows. When we then apply the verbs above on the resulting object they'll be automatically applied "by group".

Grouping affects the verbs as follows:

-   grouped *select()* is the same as ungrouped *select()*, except that grouping variables are always retained.
-   grouped *arrange()* is the same as ungrouped; unless you set *.by_group = TRUE*, in which case it orders first by the grouping variables.
-   *mutate()* and *filter()* are most useful in conjunction with window functions (like *rank()*, or *min(x) == x*). They are described in detail in vignette("window-functions").
-   *sample_n()* and *sample_frac()* sample the specified number/fraction of rows in each group.
-   *summarise()* computes the summary for each group.

In our case, *group_by()* will used together with *summarise()* to derive the summarised data.frame.

::: callout-note
## Recommendation

Learners who are new to **dplyr** methods should consult [Introduction to dplyr](https://cran.r-project.org/web/packages/dplyr/vignettes/dplyr.html) before moving on to the next section.
:::

### Grouped summaries without the Pipe

The code chunk below shows a typical two lines code approach to perform the steps.

```{r}
realis2018_grouped <- group_by(realis2018, `Project Name`,
                               `Planning Region`, `Planning Area`,
                                `Property Type`, `Type of Sale`)
realis2018_summarised <- summarise(realis2018_grouped,
                                    `Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
                                    `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
                                    `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm =  TRUE),
                                    `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

::: callout-note
-   Aggregation functions such as *sum()* and *meadian()* obey the usual rule of missing values: if there's any missing value in the input, the output will be a missing value. The argument *na.rm = TRUE* removes the missing values prior to computation.
:::

The code chunk above is not very efficient because we have to give each intermediate data.frame a name, even though it is not primarily important.

### Grouped summaries with the *pipe*

The code chunk below shows a more efficient way to tackle the same processes by using the *pipe*, %\>%:

::: callout-note
## Recommendation

To learn more about pipe, visit this excellent article: [Pipes in R Tutorial For Beginners](https://www.datacamp.com/community/tutorials/pipe-r-tutorial).
:::

```{r}
realis2018_summarised <- realis2018 %>%
  group_by(`Project Name`, `Planning Region`,
           `Planning Area`, `Property Type`,
            `Type of Sale`) %>%
  summarise(`Total Unit Sold` = sum(`No. of Units`, na.rm = TRUE),
            `Total Area` = sum(`Area (sqm)`, na.rm = TRUE),
            `Median Unit Price ($ psm)` = median(`Unit Price ($ psm)`, na.rm = TRUE),
            `Median Transacted Price` = median(`Transacted Price ($)`, na.rm = TRUE))
```

## Designing Treemap with treemap Package

**treemap** package is a R package specially designed to offer great flexibility in drawing treemaps. The core function, namely: *treemap()* offers at least 43 arguments. In this section, we will only explore the major arguments for designing elegent and yet truthful treemaps.

### Designing a static treemap

In this section, *treemap()* of **Treemap** package is used to plot a treemap showing the distribution of median unit prices and total unit sold of resale condominium by geographic hierarchy in 2018.

First, we will select records belonging to resale condominium property type from *realis2018_summarised* data frame.

```{r}
realis2018_selected <- realis2018_summarised %>%
  filter(`Property Type` == "Condominium", `Type of Sale` == "Resale")
```

### Using the basic arguments

The code chunk below designs a treemap by using three core arguments of *treemap()*, namely: *index*, *vSize* and *vColor*.

```{r}
treemap(realis2018_selected,
        index = c("Planning Region", "Planning Area", "Project Name"),
        vSize = "Total Unit Sold",
        vColor = "Median Unit Price ($ psm)",
        title = "Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
Things to learn from the three arguments used:

-   index
    -   The index vector must consist of at least two column names or else no hierarchy treemap will be plotted.
    -   If multiple column names are provided, such as the code chunk above, the first name is the highest aggregation level, the second name the second highest aggregation level, and so on.
-   vSize
    -   The column must not contain negative values. This is because it's values will be used to map the sizes of the rectangles of the treemaps.

::: callout-warning

The treemap above was wrongly coloured. For a correctly designed treemap, the colours of the rectagles should be in different intensities showing, in our case, median unit prices.

For *treemap()*, *vColor* is used in combination with the argument *type* to determine the colours of the rectangles. Without defining *type*, like the code chunk above, *treemap()* assumes type = index, in our case, the hierarchy of planning areas.
:::

### Working with *vColor* and type arguments

In the code chunk below, *type* argument is defined as value.

```{r}
treemap(realis2018_selected,
        index = c("Planning Region", "Planning Area", "Project Name"),
        vSize = "Total Unit Sold",
        vColor = "Median Unit Price ($ psm)",
        type = "value",
        title = "Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

::: callout-note
## Things to learn from the code chunk above.

-   The rectangles are coloured with different intensities of green, reflecting their respective median unit prices.\
-   The legend reveals that the values are binned into ten bins, i.e. 0-5000, 5000-10000, etc. with an equal interval of 5000.
:::

### Colours in treemap package

There are two arguments that determine the mapping to color palettes: *mapping* and *palette*. The only difference between "value" and "manual" treemap is the default value for mapping.

The "value" treemap considers palette to be a diverging color palette (say ColorBrewer's "RdYlBu"), and maps it in such a way that 0 corresponds to the middle color (typically white or yellow), -max(abs(values)) to the left-end color, and max(abs(values)), to the right-end color.

The "manual" treemap simply maps min(values) to the left-end color, max(values) to the right-end color, and mean(range(values)) to the middle color.

### The “value” type treemap

The code chunk below shows a value type treemap.

```{r}
treemap(realis2018_selected,
        index = c("Planning Region", "Planning Area", "Project Name"),
        vSize = "Total Unit Sold",
        vColor = "Median Unit Price ($ psm)",
        type = "value",
        palette = "RdYlBu",
        title = "Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
::: callout-note
## Things to learn from the code chunk above:

-   although the colour palette used is RdYlBu but there are no red rectangles in the treemap above. This is because all the median unit prices are positive.
-   The reason why we see only 5000 to 45000 in the legend is because the *range* argument is by default c(min(values, max(values)) with some pretty rounding.
:::

### The “manual” type treemap

The “manual” type does not interpret the values as the “value” type does. Instead, the value range is mapped linearly to the colour palette.

The code chunk below shows a manual type treemap.

```{r}
treemap(realis2018_selected,
        index = c("Planning Region", "Planning Area", "Project Name"),
        vSize = "Total Unit Sold",
        vColor = "Median Unit Price ($ psm)",
        type = "manual",
        palette = "RdYlBu",
        title = "Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```
::: callout-note
## Things to learn from the code chunk above:

-   The colour scheme used is very confusing. This is because mapping = (min(values), mean(range(values)), max(values)). It is not wise to use diverging colour palette such as *RdYlBu* if the values are all positive or negative
:::

To overcome this problem, a single colour palette such as Blues should be used instead.

```{r}
treemap(realis2018_selected,
        index = c("Planning Region", "Planning Area", "Project Name"),
        vSize = "Total Unit Sold",
        vColor = "Median Unit Price ($ psm)",
        type = "manual",
        palette = "Blues",
        title = "Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

### Treemap Layout

*treemap()* supports two popular treemap layouts, namely: "squarified" and "pivotSize". The default is "pivotSize".

The squarified treemap algorithm (Bruls et al., 2000) produces good aspect ratios, but ignores the sorting order of the rectangles (sortID). The ordered treemap, pivot-by-size, algorithm (Bederson et al., 2002) takes the sorting order (sortID) into account while aspect ratios are still acceptable.

### Working with *algorithm* argument

The code chunk below plots a squarified treemap by changing the algorithm argument.

```{r}
treemap(realis2018_selected,
        index = c("Planning Region", "Planning Area", "Project Name"),
        vSize = "Total Unit Sold",
        vColor = "Median Unit Price ($ psm)",
        type = "manual",
        palette = "Blues",
        algorithm = "squarified",
        title = "Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

### Using *sortID*

When "pivotSize" algorithm is used, *sortID* argument can be used to determine the order in which the rectangles are placed from top left to bottom right.

```{r}
treemap(realis2018_selected,
        index = c("Planning Region", "Planning Area", "Project Name"),
        vSize = "Total Unit Sold",
        vColor = "Median Unit Price ($ psm)",
        type = "manual",
        palette = "Blues",
        algorithm = "pivotSize",
        sortID = "Median Transacted Price",
        title = "Resale Condominium by Planning Region and Area, 2018",
        title.legend = "Median Unit Price (S$ per sq. m)"
        )
```

## Designing Treemap using **treemapify** Package

**treemapify** is a R package specially developed to draw treemaps in **ggplot2**. In this section, we will learn how to design treemps closely resembling treemaps designed in previous section by using **treemapify**. Before getting started, it is recommended to read [Introduction to "treemapify"](https://cran.r-project.org/web/packages/treemapify/vignettes/introduction-to-treemapify.html) its [user guide](https://cran.r-project.org/web/packages/treemapify/treemapify.pdf).2

### Designing a basic treemap

```{r}
ggplot(data = realis2018_selected,
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`),
       layout = "scol",
       start = "bottomleft") +
  geom_treemap() +
  scale_fill_gradient(low = "light blue", high = "blue")
```

### Defining hierarchy

Designing treemap with Group by Planning Region

```{r}
ggplot(data = realis2018_selected,
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`),
       start = "topleft") +
  geom_treemap()
```
Group by Planning Area

```{r}
ggplot(data = realis2018_selected,
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) +
  geom_treemap()
```
Adding boundary line

```{r}
ggplot(data = realis2018_selected,
       aes(area = `Total Unit Sold`,
           fill = `Median Unit Price ($ psm)`,
           subgroup = `Planning Region`,
           subgroup2 = `Planning Area`)) +
  geom_treemap() +
  geom_treemap_subgroup2_border(colour = "grey40",
                                size = 2) +
  geom_treemap_subgroup_border(colour = "gray20")
```

## Designing Interactive Treemap using **d3treeR**

### Installing *d3treeR* package

This slide shows how to install a R package which is not available in cran.

1.  If this is the first time installing a package from github, you should install *devtools* package by using the code below or else you can skip this step.

```{r, echo=TRUE, eval=FALSE}
install.packages("devtools")
```

2.  Next, you will load the *devtools* library and install the package found in github by using the codes below.

```{r, echo=TRUE, eval=FALSE}
library(devtools)
install_github("timelyportfolio/d3treeR")
```

3.  Now you are ready to launch *d3treeR* package

```{r, echo=TRUE}
library(d3treeR)
```

### Designing An Interactive Treemap

The codes below performs two processes.

1.  *treemap()* is used to build a treemap by using selected variables in condominium data.frame. The treemap created is saved as object called ***tm***.

```{r}
tm <- treemap(realis2018_summarised,
              index = c("Planning Region", "Planning Area"),
              vSize = "Total Unit Sold",
              vColor = "Median Unit Price ($ psm)",
              type = "value",
              title = "Private Residential Property Sold, 2018",
              title.legend = "Median Unit Price (S$ per sq. m)"
              )
```
2.  Then *d3tree()* is used to build an interactive treemap.

```{r}
d3tree(tm, rootname = "Singapore")
```

